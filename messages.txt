extcomms.ts:17: listener.emit(type, data, sender, sendResponse);
extcomms.ts:39: listener.on("pageInfo", (data, sender) => {
extcomms.ts:56: socket.on("extension", (msg) => {
extcomms.ts:63: listener.on("navto", (data) => {
extcomms.ts:67: listener.on("focusTab", (data) => {
extcomms.ts:71: listener.on("socketMessage", (data) => {
extcomms.ts:73: socket.emit(data.event, data.payload);
extcomms.ts:135: listener.emit(type, data, sender, sendResponse);
extcomms.ts:140: listener.on('click', (data) => {
extcomms.ts:144: listener.on('select', (data) => {
extcomms.ts:149: listener.on('enable', (data) => {
extcomms.ts:153: listener.on('setvalue', (data) => {
extcomms.ts:158: listener.on('screenshot', (data) => {
collab.ts:16: socket.emit("getDocument");
collab.ts:17: socket.once("getDocumentResponse", (version: number, doc: string) => {
collab.ts:26: socket.emit("pullUpdates", version);
collab.ts:27: socket.once("pullUpdateResponse", (updates) => {
collab.ts:36: socket.emit("pushUpdates", version, JSON.stringify(updates));
collab.ts:37: socket.once("pushUpdateResponse", (success) => {
App.tsx:41: newSocket.on("connect", () => {
App.tsx:45: newSocket.emit("session?", "client");
App.tsx:47: newSocket.emit("session:", session);
App.tsx:52: newSocket.on("session:", (session) => {
App.tsx:53: newSocket.emit("session:", session, "client");
App.tsx:60: newSocket.on("connect_error", (error) => {
MessageSender.ts:11: this.socket.emit("monitor", { op: "llm", from: sessionId, content });
CollaborationPage.tsx:164: socket.on('connect', handleConnect);
CollaborationPage.tsx:165: socket.on('disconnect', handleDisconnect);
CollaborationPage.tsx:166: socket.on('connect_error', handleConnectError);
CollaborationPage.tsx:459: socket.emit("notification", { type: "error", message: result.message });
CollaborationPage.tsx:468: socket.emit("message", { from: 'Y', text: `${result.message}\n\`\`\`\n${result.command}\n\`\`\`` });
CollaborationPage.tsx:480: socket.emit("message", { 
CollaborationPage.tsx:495: socket.emit("message", { 
CollaborationPage.tsx:510: socket.emit("message", { from: 'Y', text: `${result.message}` });
CollaborationPage.tsx:511: socket.emit("message", { from: 'Y', text: `Starting workflow with automatic .env file updates enabled...` });
CollaborationPage.tsx:523: socket.emit("message", { 
CollaborationPage.tsx:546: socket.emit("message", { 
CollaborationPage.tsx:554: socket.emit("message", { 
CollaborationPage.tsx:567: socket.emit("message", { 
CollaborationPage.tsx:575: socket.emit("message", { 
CollaborationPage.tsx:586: socket.emit("message", { 
CollaborationPage.tsx:597: socket.emit("message", { from: 'Y', text: result.message });
CollaborationPage.tsx:605: socket.emit("message", { from: 'Y', text: result.message });
CollaborationPage.tsx:621: socket.emit("message", { 
CollaborationPage.tsx:631: socket.emit("message", { 
CollaborationPage.tsx:639: socket.emit("message", { 
CollaborationPage.tsx:648: socket.emit("notification", { 
Rewind.tsx:34: socket.on("testgo", handleGoClick);
Rewind.tsx:51: socket.emit("monitor", { op: "rewind", sessionId, timestamp: timestamp });
Rewind.tsx:61: socket.emit("monitor", { op: "calibrate" });
Logging.tsx:16: socket.on('log', (log: string) => {
save", sessionID, contents });
ScriptEditor.tsx:45: socket.emit("monitor", { op: "save", sessionID, contents });
append", handleAppend);
load", handleLoad);
monitor.py:90: self.sio.emit('session?', 'monitor')
monitor.py:92: @self.sio.on('session:')
monitor.py:100: @self.sio.on('calibrate')
monitor.py:106: @self.sio.on('llm')
monitor.py:125: self.sio.emit("forward", {
monitor.py:142: self.sio.emit("forward", {
monitor.py:149: @self.sio.on('rewind')
monitor.py:156: @self.sio.on('update_env')
monitor.py:175: self.sio.emit("forward", {
monitor.py:186: self.sio.emit("forward", {
monitor.py:197: self.sio.emit("forward", {
monitor.py:205: @self.sio.on('message')
collaborativeEditing.ts:6: sm.io.on('connection', (socket: Socket) => {
collaborativeEditing.ts:8: socket.on("session:", (newSessionId: string, componentType: string) => {
collaborativeEditing.ts:11: socket.on("conversation:", (sessionId: string, conversationId: string) => {
collaborativeEditing.ts:15: socket.on('pullUpdates', (sessionId: string, version: number, conversationId: string) => {
collaborativeEditing.ts:20: socket.emit('pullUpdates', updates);
collaborativeEditing.ts:24: socket.on('pushUpdates', (sessionId: string, version: number, updates: Update[], conversationId: string) => {
collaborativeEditing.ts:33: otherSession.socket.emit('receiveUpdates', conversationId, updates);
messageForwarder.ts:5: sm.io.on('connection', (socket: Socket) => {
messageForwarder.ts:6: socket.on('forward', (message: any) => {
messageForwarder.ts:11: targetSession.socket.emit(op, data);
messageForwarder.ts:18: sessionInfo.socket.emit(message.type, message.payload);
monitorCommunication.ts:7: sm.io.on('connection', (socket: Socket) => {
monitorCommunication.ts:8: socket.on('monitor', (payload: any) => {
monitorCommunication.ts:11: monitorSocket.emit(op, data);
monitorCommunication.ts:17: socket.on('session?', (componentType: string) => {
sessionManager.ts:21: io.on('connection', (socket: Socket) => {
sessionManager.ts:23: socket.on('session?', (componentType: string) => {
sessionManager.ts:25: socket.emit('session:', sessionId);
sessionManager.ts:27: socket.on('session:', (sesionId: string, componentType: string) => {
sessionManager.ts:30: socket.on('disconnect', () => {
append", {"timestamp": timestamp})
moment", {"timestamp": timestamp})
